<30. 1장 | 벨로퍼트와 함께 하는 모던 리액트 : 리액트 입문 - 김민준 강사>
00. 강의 소개
- 클래스형 컴포넌트에서 hooks + 함수형 컴포넌트로 진화함
- react를 사용하려면 javascript의 기초를 잘 알아야함
- 리엑트 참고 자료 주소 : https://react.vlpt.us/
--------------------------------------------------------------------------------------------
01. 리액트는 어쩌다가 만들어졌을까
- 자바스크립트를 사용하면 dom을 활용한 변형을 할 때 웹어플리케이션 코드가 길이가 길어지면 복잡하고 처리하기 힘들어짐
- 리액트는 다른 js의 프레임워크들과는 다르게 dom의 상태값이 변하면 아예 처음부터 만들어서 보여주면 어떨까라는 생각으로 부터 만들어짐
- 업데이트를 어떻게 해야할까라는 문제가 사라짐
- 모든걸 다 날리고 새로 만든다면 속도가 매우 느려질텐데 virtual dom을 이용하여 그 문제점을 해결함(메모리에 가상으로 존재하는 dom)
- react에서는 업데이트가 필요한 dom을 virtual dom에 저장하고 브라우저에서 보여주고 있는 돔과 virtual 돔의 차이점을 비교하고 patch해서 반영시켜줌
- 필요한 변화만 발생시켜서 바꿔주므로써 빠른 속도를 보장
- UI를 어떻게 업데이트할지보다 UI를 어떻게 보여줄지에 집중해서 코딩하면 됨
- 리액트에서는 UI를 컴포넌트 형태로 사용, 컴포넌트는 다양한 기능을 제공
--------------------------------------------------------------------------------------------
02. 작업환경 준비
- nodejs(웹이 아닌 곳에서 자바스크립트를 실행할 수 있게 해주는 자바스크립트 런타임)
- yarn(자바스크립트 페키지를 다운로드 할 때 사용)
- VS Code (에디터)
- git for windows (git의 윈도우 버전) - 맥으로 할때는 필요없음
- 리액트의 새로운 프로젝트를 만들때에는 원하는 경로에 가서 npx create-react-app 원하는디렉토리명 명령어를 치면됨
- 만들어진 디렉토리로 이동하여 yarn start 명령어 실행 그러면 react 웹화면이 만들어진것인데 이러면 개발 환경이 완성된 것
- 처음 보여주는 화면은 해당 디렉토리 - src - App.js를 수정하면 바꿀 수 있음
- 개발 서버를 끄고싶을 때에는 ctrl+c를 누르면 됨
- 이러한 환경을 구성하기 힘들때에는 code sandbox를 이용하여 개발하면 된다
--------------------------------------------------------------------------------------------
03. 나의 첫번째 리액트 컴퓨넌트
- 리액트를 사용할때에는 항상 첫줄에 import React from 'react';를 적어줘야함
- 컴포넌트 이름은 대문자로 시작하여 카멜표기법 사용
- 함수형태로 만들어서 return 문에 html 형식의 데이터 전송
- 마지막에 export default 함수명을 통해서 적재해줌
- js 파일에서 원하는 리액트 파일을 import 해서 사용
- App.js 에서 파일을 적재한 후에 사용해주면 됨
- index.js 에서 파일 아이디가 root인 것에 넣어서 실행하겠다는 것을 나타내줌
- public/index.html에 삽입되어 나타내어지는 것이라고 보면 됨
- 30강\begin-react에 src에 hello.js 가 동작할 react 파일, App.js가 react 파일을 받아와서 어떻게 출력해줄 것인가를 나타내주는 파일, public의 index.html이 기본 html 경로
--------------------------------------------------------------------------------------------
04. JSX
- JSX는 REACT 의 컴포넌트의 생김새를 구성할 때 사용
- JSX는 HTML형태로 코드를 작성하면 JS 코드로 변경해주는 것
- 문제가 생기지 않게하려면 꼭지켜야하는 규칙들이 몇가지 있음
 - 꼭 태그를 닫아줘야함(닫는 태그를 사용하지 않는 태그들도 맨뒤에 /를 넣어줘서 닫는 태그로 표시해주어야함 ex.<input />)
 - 두개 이상의 태그는 무조건 하나의 태그로 감싸주어야함
 - 태그로 감싸기 애매할때에는 fragment tag를 이용하면 됨 <> </>의 형태로 감싸주면 에러가 발생하지 않음
 - ()로 return문 안쪽의 코드들을 감싸지 않아도 되지만 감싸는 이유는 태그들을 같은 레벨에 두어 가독성을 증가시키기 위함임
 - const나 let으로 선언된 변수를 jsx 내부에서 보여주고 싶으면 {변수명}으로 표현하면 그 값을 보여줌
 - 스타일을 설정해줄때에는 변수를 만들어주어야하는데 -로 연결된 스타일 속성의 경우에는 카멜표기법으로 표현해주어야함
   > ex) const style = {
            backgroundColor: 'black',
            color: 'aqua',
            fontSize: 24,
            padding: '1rem'
        }
        이런식으로 선언해주고 태그 내에서는 <div style={style}></div> 이런식으로 사용해주면 된다
 - jsx에서는 class를 className으로 넣어주어야함
 - 주석은 {/* */}로 중괄호로 감싸서 사용해야함
 - 태그 내에서 //로 주석 달면 이것도 나타나지 않음
 - 30강/4장/파일들 react 폴더에 복사해서 실행해보면 됨(react 파일들은 다 이런식으로 저장해둘 것(이장에서 바뀐 파일들만 넣어주기 때문에 추가로 필요한 파일들은 이전장에서 복사해서 사용))
--------------------------------------------------------------------------------------------
05. props 를 통해 컴포넌트에게 값 전달하기
- props는 properties의 줄임말로 자식에게 값을 전달해주고 싶을 때 사용하는 것
- App.js 에 선언되어있는 값을 전달해주고 싶을 때 사용하며 
  <Hello name='react' />로 App.js 에 선언해두었다면
  hello.js 에서는 function Hello(props) 이런식으로 가져다가 쓰면 console.log(props);를 해주면 name: 'react'가 보여짐 또는 {props.name}하면 name으로 선언된 값을 보여줌
- props 내에 변수가 여러개있다면 구조분해를 이용하여 사용할수도 있음(props 자리에 {color, name} 이런식으로 사용)
- props가 설정되어있지 않을 때 기본값을 설정해주고 싶다면 
  Hello.defaultProps = {
      name: 'js'
  }
  이런식으로 설정해주면 됨
- 보통 새로운 jsx 파일을 만들면 import 하기 귀찮은데 해당 파일에 들어있는 function 태그를 <Wrapper 이렇게까지 입력하고 엔터를 누르면 자동으로 import 됨
- Wrapper같은 임의로 만든 jsx의 경우에는 안에 다른 태그들이 있으면 표시되지 않는데 children 을 이용해서 보여주면 된다
- 30강/5장/파일
--------------------------------------------------------------------------------------------
06. 조건부 렌더링
- 조건부 렌더링은 특정 결과가 참이냐 거짓이냐에 따라서 결과 값이 달라지게 하는 것을 말함
- hello.js의 isSpecial처럼 특정 값을 받아와서 참일경우는 이렇게 처리해주고 거짓일 경우에는 저렇게 처리해주는 일이 필요할 때 사용
- 삼항 연산자로도 해줄 수 있고, && 연산자 같은 논리 연산자를 사용하여 표현해 줄 수 있음
- 30강/6장/파일
--------------------------------------------------------------------------------------------
07. useState를 통해 컴포넌트에서 바뀌는 값 관리하기 
- 함수형 컴포넌트는 react의 hooks 중 하나임
- useState를 이용하여 바뀌는 값을 관리해줄 수 있음
- const [바뀌는값, 함수] = useState(초기값);의 형태로 선언해서 사용
- return 의 원하는 부분에 {바뀌는값}의 형태로 선언해서 사용
- 그리고 바꾸는 함수를 사용할 때에는 함수(바뀔 형태);의 모양으로 사용해주면 됨
- 보통은 함수에 함수형 업데이터를 사용하여 최적화를 함(변수 => 변수 바뀔 식)
- 30강/7장/파일