<10. css/실습환경>

1강. css reset
- css는 처음에 초기화를 하고 사용하여야 한다, 브라우저마다 다른 모양으로 출력될 수 있기 때문에 동일하게 기본적으로 제공하는 스타일로 보여주기 위해서 초기화하는 것
- reset css cdn 에 가서 초기화 css 를 복사해서 사용할 수 있다.
- reset css cdn은 무조건 우리가 정의한 css보다 위에 link 해야함
- 10강 index_1.html, main_1.css
-----------------------------------------------
2강. codepen
- 구글에 codepen 검색
- start coding 눌러서 할 수 있음
-----------------------------------------------
3강. emmet
- css에 .box와 같이 class로 클래스 선택자로 선언을 해놓으면 include한 html에서 tag.class하고 엔터 치면 바로 그 태그의 class명을 가진 태그를 만들어줌
- >하고 선택자를 하면 자식 요소로 만들어짐
- emmet문법은 보통 태그를 만들때 많이 사용한다
- 보통 에디터들이 emmet 문법을 제공하므로 따로 설치할 필요는 없다
- emmet 문법 + tab키로 사용
-----------------------------------------------
<11. css/개요, 선택자, 상속>

1강. 기본문법
- css는 화면의 모양을 바꿔주는 것
- css는 보통 선택자{ 속성:속성값; 속성:속성값; } 의 형태로 사용하며 속성과 속성값 사이에는 :, 속성끼리는 ;로 구분
- 선택자는 속성과 값을 지정할 때상을 검색할 때 사용
- 속성과 값은 검색된 대상에 지정될 css명령을 지정
- 주석은 /* */ 로 작성
-----------------------------------------------
2강. 선언방식
- 인라인 방식은 선택자가 필요없이 태그에 바로 사용
- 내장방식은 head 태그 안에 style 태그를 정의해서 css를 정의
- 선언방식은 외부에 선언되어있는 css파일을 가져오는 것으로 link태그를 통해서 가져온다. 보통 이방식을 사용
- @import 방식은 외부에 있는 문서를 가져오는 것으로 css내에서 외부의 css를 가져올 때 사용함 (@import url("./mainframe.css"); 이런식으로 사용)
- link는 html에서 @import 는 css에서 사용
- link 방식은 1번 코드가 불러와지고 2번코드가 불러와지는 뒤에 정의된 내용이 필요하면 @import 방식이 유용하게 사용가능
-----------------------------------------------
3강. 기본 선택자
- 4가지 선택자가 기본인데 전체선택자, 태그 선택자, 클래스 선택자, 아이디 선택자가 존재
- 전체 선택자는 *으로 나타내며 모든 요소를 선택할 때 사용
- 태그 선택자는 태그 이름으로 선택하여 css를 적용할 때 사용 ( div, head, p, ....등등)
- 클래스 선택자는 특정한 클래스를 지정하여 css를 적용할 때 사용 .클래스명으로 사용
- 아이디 선택자는 특정한 아이디를 지정하여 css를 적용할 때 사용하며 #id 를 통해 사용 (id는 고유하게 사용)
-----------------------------------------------
4강. 복합 선택자
- 일치 선택자는 선택자 E와 F가 모두 만족하는 경우 css를 지정 예를들어 span.orange와 같이 사용하며 span 태그중 클래스가 orange인 곳에 적용
- 자식 선택자는 선택자의 자식 선택자를 선택하여 css를 적용하는 것으로 ul > .orange와 같이 사용하며 ul태그의 자식인 곳 중에서 orange 클래스를 갖는 곳에 css 적용 >앞이 조건 뒤가 선택
- 후손 선택자는 E의 후손 F를 선택하는 것으로 띄어쓰기로 구분한다 div .orange와 같이 사용하며 div의 후손 중에서 .orange 클래스인 곳에 css를 적용한다 자식의 자식의 자식의 .....까지가 다 후손임
- 자식은 한 뎁스 아래만을 말하며 자식은 후손에 포함된다. 부모는 한뎁스 위를 말하며 부모는 조상에 포함된다.
- 인접 형제 선택자는 E의 다음 형제 요소 F하나만 선택, .orange + li 와 같은 형태로 사용하며 .orange 클래스를 갖는 태그의 다음 인접해있는 형제에 지정
- 일반 형제 선택자는 E의 다음 모든 형제 요소 F를 선택, .orange ~ li 와 같은 형태로 사용하며 .orange 클래스를 갖는 태그의 다음 형제들 모두에게 css 지정
-----------------------------------------------
5강. 가상클래스 선택자 - hover, active, focus
- 가상 클래스 선택자는 앞에 : 하나 붙어있음
- hover는 마우스 포인터가 올라가있는 동안에만 동작하는 css를 작성할 때 사용
- hover 예제 : 11강 index_1.html, main_1.css
- active는 마우스로 클릭하는 동안에만 css를 적용할 때 사용
- 변화를 천천히 하려면 transition:시간으로 지정해주면 됨
- active 예제 : 11강 main_1.css에 hover를 active로 변경
- focus는 input에 포커스가 지정되었을 때 사용
- focus 예제 : 11강 index_2.html, main_2.css
-----------------------------------------------
6강 가상클래스 선택자 - first-child, last-child
- first-child는 E가 형제 요소 중 첫번째 요소라면 선택하는 것으로 E:first-child같은 방식으로 사용
- last-child는 E가 형제 요소 중 마지막 요소라면 선택하는 것으로 E:last-child 같은 방식으로 사용
-----------------------------------------------
7강. 가상클래스 선택자 - nth-child
- n번째 자식요소를 선택하여 css를 적용하기 위해서 사용 0부터 사용 li:nth-child(2n)과 같은 형태로 사용하며 2,4,6,8....번째 자식들을 선택해서 css적용, +, -, *, / 같은 기호를 사용하여 수식으로 넣을 수 있음
-----------------------------------------------
8강. 가상클래스 선택자 - xxx-child 주의사항
- n번째에 다른 태그가 있으면 적용 안될수도 있음 오른쪽에서 왼쪽으로 읽는게 좋음
- 만약 .fruits p:nth-child(1)일 경우 fruits클래스의 p태그중 첫번째에 지정하는 것 같지만 첫번째가 p 가 아닌 다른 태그일경우 지정되지않느다
-----------------------------------------------
9강. 가상클래스 선택자 - nth-of-type, not
- nth-of-type은 E와 동일한 타입을 가진 것 중에서 n번째인 곳을 지정
- E:nth-of-type(n)으로 사용함 예를들어서 .fruit p:nth-of-child(1)하면 fruit클래스의 자식중에서 타입이 p인 것 중에서 첫번째를 지정해줌
- nth-of-type은 태그를 찾는데만으로 사용해야함(클래스 안댐)
- not은 조건에서 뺄 때 사용
- .fruits li:not(.strawberry)라고 사용하면 과일 클래스 안의 li태그들 중에서 딸기만 빼고 선택해서 css 적용
-----------------------------------------------
10강. 가상요소 선택자 - before
- 가상 클래스랑은 다르게 가상 요소 선택자는 가상요소를 생성해서 하는 것으로 ::을 붙여서 쓴다
- E::before는 요소 내부의 앞에 내용을 삽입할 때 사용
- ul>li{숫자$}*5처럼 사용하면 ul태그 밑에 li 5개 생성
- before 선택자 사용 시에 content: "내용";을 사용하지 않으면 우무런 효과가 일어나지 않음, 앞에 css를 적용하는거니까 content가 있어야하는것
- before 예시는 11강 index_3.html, main_3.css
-----------------------------------------------
11강. 가상요소 선택자 - after
- after는 요소의 뒤에 내용을 추가하는 것
- before와 마찬가지로 content: ""; 가 들어가야 css가 적용되는 것을 볼 수 있음
- content속성에 content: url("주소");로 해서 연결할 수 있음
- before, after는 : 하나만 써도 동작은 하지만 가상 클래스와 차별을 두기 위해서 ::를 쓴다(원래는 :가 하나쓰는걸로 출시되었으나 나중에 나뉘어 나온것임)
-----------------------------------------------
12강. 속성 선택자 - [attr], [attr=value]
- css에도 속성이라는 것이 있는데 color: red;의 color 부분이라고 생각 할 수도 있지만 html의 속성을 선택하는 것이지 저것을 의미하는 것이 아님
- [attr]의 형식으로 사용하며 attr에 선택할 속성을 넣음
- [attr=value] 형태로도 쓸수있으며 특정 속성의 값이 value인 경우에 그곳에 css를 적용하겠다 라는 것을 나타냄
- 11강 index_4.html, main_4.css
-----------------------------------------------
13강. 속성 선택자 - [attr^=value], [attr$=value]
- attr^=value는 속성이 value로 시작하는 것을 선택하여 css적용
- attr$=value는 위의 ^와 반대로 value로 끝나는 것을 선택하여 css적용
- 11강 index_5.html, main_5.css
-----------------------------------------------
14강. 상속
- 특정한 요소들은 부모 요소에 적용된 속성이 하위 요소에게도 적용되는데 상속이라고 부른다
- 상속이 되는 속성들은 대부분 글자를 다루는 속성들임
- 상속이 되는 속성 : font, color, text-align, text-indent ..... 등등 글자를 다루는 속성들
- 원래는 상속되지 않는 것을 강제로 상속시킬 수 있는데 이걸 강제 상속이라고 부른다
- 강제 상속은 position: inherit;를 자식에 써서 사용(부모의 값을 자식이 물려받아서 사용하기 때문에 부모에서 바뀌면 자식 요소에서도 바뀐다.)
-----------------------------------------------
15강. 우선순위
- 한개의 html 태그문에서 css가 태그, 아이디선택자, 클래스선택자, 전체 선택자, 상속 등 다양하게 css를 지정 할 수 있는데 과연 어떤 css가 가장 우선순위가 높을까?
- 하나의 요소가 여러 선언의 대상이 될 경우, 아래의 순서대로 적용 우선 순위를 결정
  1. 명시도 점수가 높은 선언이 우선(명시도)
  2. 점수가 같은 경우, 가장 마지막에 해석(늦게 작성한)되는 선언이 우선(선언 순서)
  3. 명시도는 '상속' 규칙보다 우선(중요도)
  4. !important 가 적용된 선언 방식이 다른 모든 방식보다 우선으로 적용
- 점수를 구하는 방법
  1. !important = 무한대의 점수를 갖는다.
  2. 인라인 선언방식 = 1000점의 점수를 갖는다.(단 인라인 방식은 너무 쓸데없이 점수가 높기 때문에 유지보수에 문제가 있어서 사용을 자제한다.)
  3. 아이디 선택자 = 100점의 점수를 갖는다.(고유한 요소일수록 점수가 높음)
  4. 클래스 선택자 = 10점의 점수를 갖는다.(아이디 선택자보다는 낮음)
  5. 태그 선택자 = 1점의 점수를 갖는다.
  6. 전체 선택자 = 0점의 점수를 갖는다.
  7. 상속 = 점수를 계산하지 않는다.
- 위의 1~7등 순서로 적용(좁은 범위에서 넓은 범위로 생각하면 쉬움)
-----------------------------------------------
<12. css/ 단위>
1강. px, %
- px는 화면에 픽셀 단위로 절대적인 값으로 고정하는 것, 단 화면의 픽셀에 따라서 살짝 바뀔 순 있음
- %는 부모요소의 가로 사이즈에 영향을 받음, 부모 요소의 n %의 크기로 나타냄
-----------------------------------------------
2강. em, rem
- em은 자기 자신의 폰트 사이즈에 영향을 받음, 원하는 너비px = font-size의 px * 크기em
- font size는 위에서부터 상속되서 font-size를 2em이라고 하면 폰트의 크기가 부모의 2배가 된다
- rem은 root em 이다. html파일의 root라고 할 수 있는 html에 지정된 폰트사이즈의 영향만 받음(html태그에 대한 폰트 사이즈를 조절시에만 적용됨)
-----------------------------------------------
3강. vw, vh
- vw는 viewport width 의 약어 vh는 viewport height의 약어로, 출력하는 화면 전체를 viewport라 하며 화면 전체 대비 비율이라고 보면된다.
- 백분율 단위로 넣으면 된다. 전체를 100vw, 100vh라고 생각하면 됨
-----------------------------------------------
4강. vmin, vmax
- vmax는 가로너비와 세로너비중 더 넓은 사이즈의 너비에 대한 비율, vmin은 더 좁은 사이즈의 너비에 대한 비율
- 백분율으로 나타내며 100vmax, 100vmin이런식으로 쓴다
-----------------------------------------------
<13. css/속성 - 박스 모델>
1강. width, height
- width와 height의 기본값은 auto
- 블록요소는 먹지만 인라인 요소는 명령이 먹지 않는다.
-----------------------------------------------
2강. max-width, min-width, max-height, min-height
- 최대 가로 너비, 최소 가로 너비, 최대 세로 너비, 최소 세로 너비를 지정해줌
- max는 기본값이 none이고, min은 기본값이 0이 기본값으로 최대는 기본이 제한이 없지만, 최소는 0이다
- 부모요소가 자식요소의 min 값보다 작아지면 자식요소는 Min값 이하로 줄어들 수 없기 때문에 부모요소만 작아짐
-----------------------------------------------
3강. margin
- margin 은 외부 여백을 지정
- 음수로 지정할수도 있다.
- css에서는 0을 적을땐 단위를 적진않음
- %로 쓰면 부모요소의 너비의 퍼센트로 들어감
- margin은 4가지 방식으로 사용 가능
  - margin: 10px; //상하좌우 여백이 10px
  - margin: 10px 20px; // 상하 10px, whkdn 20px
  - margin: 10px 20px 30px; //위, 좌우, 아래 순으로 10px, 20px , 30px
  - margin: 10px 20px 30px 40px; //위 우 아래 좌(시계방향)으로 10, 20 30,40 px
- margin-top margin-bottom margin-right margin-left도 사용하는데 이건 특정 1,2개 부분에만 margin 을 넣을 때 사용
-----------------------------------------------
4강. margin - 중복(collapse)
- margin의 특정 값들이 중복되어 합쳐지는 현상
  - 두개의 형제 요소들의 margin-top과 margin-bottom이 만났을 때
  - 부모 요소의 margin-top과 자식요소의 margin-top이 만났을 때
  - 부모 요소의 margin-bottom과 자식요소의 margin-bottom이 만났을 때
  - 잘못된건 아님
- 기본적으로 형제 요소의 margin 좌우 margin은 더해짐, 그러나 상하로 만나면 중복되서 만약 위의 margin-bottom이 20, 아래의 margin-bottom이 20이면 둘사이의 margin은 20
- 부모요소의 margin-top이 시작되는 부분과 자식요소의 margin-top이 시작되는 부분이 만나서 있다면 자식요소의 margin-top이 부모요소의 margin-top 처럼 쓰임
- 마진 값이 둘다 양수면 더큰값, 둘다 음수면 더 작은 값, 음수하나 양수 하나이면 둘을 더한 값
-----------------------------------------------
5강. padding
- 요소의 내부에 있는 여백을 지정할 때 사용
- 기본 값은 0임
- 사용방법은 margin과 같음
- padding을 추가하면 요소의 크기가 그만큼 커지는 현상이 있음
- box-sizing: border-box; 옵션을 넣으면 padding을 넣어도 크기가 커지지 않고 크기가 고정된 상태에서 내부에 padding이 들어감
-----------------------------------------------
6강. border
- 테두리 선을 지정할 때 사용
- border는 속성이 border-width, border-style, border-color이 있으며 기본값은 각각 medium, none, black이다.
- css에는 border: 두께 종류 색상; 이런식으로 사용
- border: 1px solid red; 이렇게 쓰는데 solid는 실선임
- width는 medium, thin, thick 또는 px,em,cm단위로 사용 가능
- border도 padding이나 margin 처럼 상하좌우를 따로 지정할 수 있는데 사용법을 border-width: 옵션;으로 사용
- 선의 종류는 none, hidden, solid(실선), dotted(점선), dashed(파선), double(두줄선), groove(홈이 파여있는 모양 선), ridge(솟은 모양 선(groove의 반대)), inset(요소가 들어간 선), outset(요소 전체가 나온 모양 선)
- border-style도 border-width 처럼 상하좌우 다르거 지정 가능
- border-color는 색상의 개념으로 쓰면 됨(transparent를 쓰면 백그라운드 색깔과 같은 색깔로 테두리색 지정)
- border 속성같은 경우에는 상하 좌우 다르게 지정하기 위해서 border-top-width:1px; 이런식으로 지정할 수 있음
- 요소의 크기는 요소의 width + border의 두께로 된다 이걸 해결하기 위해서는 직접 width와 height에 선의 두께를 빼거나, box-sizing: border-box; 속성을 넣으면 된다.
- 13강 index_1.html, main_1.css
-----------------------------------------------
7강. box-sizing
- padding과 border는 박스의 크기에 영향을 주는 것을 봤음
- box-sizing 옵션을 통해 변경 가능
- 기본값은 content-box는 너비와 높이만으로 크기를 지정해서 border나 padding을 넣으면 크기가 바뀜
- border-box옵션은 border와 padding을 합쳐서 너비와 높이 계산, border와 padding을 넣어도 박스의 크기가 변하지 않음
- padding-box옵션도 있긴하나 호환성이 안좋아서 잘 안쓴다.
-----------------------------------------------
8강. display
- display는 요소의 박스 타입 유형을 설정해주는 것
- block는 블록요소로 지정, inline은 인라인 요소로 지정, inlink-block는 인라인-블록요소로 지정(input요소), 기타(table, table-cell, flex), none으로 넣을 수 있음
- 각 태그마다 기본값은 있지만 바꿔서 사용할 수 있음
- inline-block은 기본적으로는 inline이지만 inline이 기본적으로 가질 수 없는 width, height, padding 같은 것을 가질 수 있음
- 13강 index_2.html, main_2.html, main_2.js 
-----------------------------------------------
9강. overflow
- 요소의 크기 이상으로 내용이 넘쳤을 때, 내용의 보여짐을 제어함
- 값은 visible(넘친부분 보여줌), hidden(넘친부분 숨김), scroll(스크롤 생성), auto가 있음
-----------------------------------------------
10강.opacity
- 요소의 투명도를 지정할 때 사용
- 값은 숫자 0부터 1사이의 소수점 숫자로 지정
- 0은 화면에 존재하지만 안보이는거도 display:none;은 아예 없어진 것 이라는 차이가 있다고 보면 됨
-----------------------------------------------
<14. css/속성 - 글꼴, 문자>
1강. font, font-style
- font-style은 글자 기울기 지정, font-weight는 글자 두께, font-size는 글자크기(기본은 16px), line-height는 줄 높이(reset.css적용 시 1), font-family는 글꼴 변경
- font: 기울기 두께 크기 / 줄높이 글꼴; 으로 단축해서 사용 가능
- 중간에 /가 들어가는 이유는 크기랑 줄높이는 순서를 명확하게 하지 않으면 뭐가 뭔지 알 수 없기 때문에 /앞은 글자 크기 뒤는 줄높이로 구분해줌
- 단축속성을 사용하기 위해서는 font-size와 font-family는 필수로 입력해줘야함
- font-style은 글자의 기울기만 을 설정해주는 태그(normal, italic(이텔릭체), oblique(기울어진 글자체) 이 3가지 속성 존재)
-----------------------------------------------
2강. font-weight
- 글자의 두께(가중치) 설정
- 값으로는 normal(기본두께, 400), bold(두껍게, 700), bolder(부모 요소보다 더 두껍게), lighter(부모 요소보다 더 얇게), 숫자가 있으며 숫자는 100단위로 100~900까지 9단계 가능
상속값 bolder lighter
100   400     100
200   400     100
300   400     100
400   700     100
500   700     100
600   900     400
700   900     400
800   900     700
900   900     700
-----------------------------------------------
3강. font-size
- 글자의 크기를 지정할 때 사용
- 단위는 px, em, cm 등으로 사용
- % 사용시 부모요소의 비율로 지정(보통 em으로 대체해서 사용)
- xx-small ~larger이 있으나 명확하지가 않아서 추천x
- font-size는 상속됨
-----------------------------------------------
4강. line-height
- 줄의 높이를 설정해줄 때 사용
- 브라우저의 기본 정의는 1~1.4로 normal 을 넣으면 됨
- 숫자, 단위,% 로 지정해 줄 수 있으며 %는 글자 크기의 비율로 지정
- line-height는 줄의 높이를 지정하는 것이기 때문에 글자 크기가 16px 이고 줄높이가 32px이면 글자 위아래 8px씩 여백
- 글꼴의 몇배정도의 줄높이를 지정하고 싶으면 %로 사용하는 것이 좋음(나중에 글씨크기 변경 시 자동으로 변경)
- 그냥 숫자만 쓰면 그 배수라고 보면 됨
-----------------------------------------------
5강. font-family
- 글꼴을 바꾸기 위한 속성
- 글꼴 이름은 후보 목록을 지정할 수 있음
- 글꼴 계열 이름을 지정해서 지정한 글꼴을 사용할 수 없을때 대체할 글꼴을 지정할 수 잇음
- font-family: 글꼴후보1,글꼴후보2,글꼴후보3,...., 글꼴계열;의 형태로 사용
- 후보를 적는 이유는 웹을 열때 폰트는 사이즈가 크기때문에 웹에 적재해놓는 것이 아니라 사용자의 브라우저에 해당 폰트가 있으면 그것으로 사용해라 라고 하는것
- 모든 후보군에 쓸 수 있는 글씨체가 없으면 마지막으로 대체할 글꼴 계열에서 찾아서 쓴다.
- 글꼴 계열에는 serif(바탕체계열), sans-serif(고딕체 계열), monospace(고정너비 글꼴 계열), cursive(필기체 계열), fantasy(작식 글꼴 계열)
-----------------------------------------------
6강. color, 색상표기법
- color 속성은 글자의 색상을 변경할 때 사용
- 색상은 색상 이름(red, blue 등등), hex 색상 코드(#000000), rgb(빛의 3원색(rbg(255,255,255)), rgba(빛의삼원색, 투명도(rbga(255,255,255,.5)), hsl(색상채도,명도(hsl(120,100%,50%)), hsla(색상, 채도, 명도, 투명도(hsla(120,100%,50%,.3))
-----------------------------------------------
7강. text-align
- 문자의 정렬방식을 지정
- left, right, center, justify(양쪽 정렬, 완성된 두줄 이상의 환경에서만 적용됨)
-----------------------------------------------
8강. text-decoration
- 문자의 장식(선)을 설정할 때 사용
- 속성에는 4가지(none, underline, overline, line-through)를 쓸 수 있음
-----------------------------------------------
9강. text-indent
- 들여쓰기를 지정할 때 사용
- 음수값도 쓸 수 있으며 앞으로 내어쓰기가 됨
-----------------------------------------------
10강. letter-spacing, word-spacing
- letter-spacing는 자간을 지정할 때 사용(단어 사이의 간격)
- word-spacing은 단어사이의 간격을 설정할 때 사용하며 띄어쓰기의 간격을 지정할 때 사용 하는 것 (너비 자체를 바꾸는 것이 아닌 기본 거리에서 얼만큼 더할 것인가)
-----------------------------------------------
<15. css/속성 - 띄움(정렬), 위치>
1강. float
- 요소를 좌우 방향으로 띄움(수평 정렬에도 사용)
- 요즘은 float보단 flex obx를 이용해서 수평정렬을 더 많이 사용
- 속성은 none, left, right 세개를 쓸 수 있음
- 신문기사처럼 사진 옆에도 글씨가 흐를 수 있도록 사용할 때 사용하는 것
- float을 해제하기 위해서는 해제할 div에서 clear:left;속성을 넣으면 됨
- 15강 index_1.html, main_1.css
- float:right;하면 같은 클래스일 경우에 오른쪽에서 왼쪽으로 순서대로 표시됨
- clear를 안쓰면 div가 겹쳐서 나오는 문제가 생기기때문에 clear를 꼭 써줘야함
- clear는 보통 both를 써서 float가 left든 right든 해제할 수 있도록 사용한다.
- 15강 index_2.html, main_2.css
- float를 해제하는 방법이 3가지가 있는데 되도록이면 부모요소에 clearfix를 클래스에 추가해줘서 해제하는것을 추천함
  - 다음 요소에 clear:both를 쓰는건 무조건 다음 요소를 만들어줘야해서 잘 안쓰는것
  - 부모요소에 overflow:hidden;을 사용해서 해제하는 경우에는 전혀 관련이 없는 속성인 overflow를 사용해야하는 것이므로 편법이라 잘 사용 안함
  - 부모 요소에 clearfix를 클래스로 넣는 것을 가장 추천하는데 무조건 float속성을 쓴 뒤에는 clear가 들어간 것 처럼 동작하기 때문
    .clearfix::after{
      content: "";
      clear:both;
      display:block;
    }으로 지정해놓아야함
- clearfix예제 : 15강 index_3.html, main_3.css
-----------------------------------------------
2강. float - display 수정
- float 속성이 추가된 요소는 대부분의 경우 display가 block로 바뀜
-----------------------------------------------
3강. clear
- clear는 float 속성이 적용되지 않도록 지정(해제)하는 역할을 함
- none, left, right, both를 사용할 수 있는데 보통 both를 사용
-----------------------------------------------
4강. position 그리고 top, bottom, left, right
- position은 요소의 위치 지정 방법의 유형을 설정해줄 때 사용
- relative는 요소 자신을 기준으로 배치, absolute는 부모를 기준으로 배치
- top, bottom, left, right는 각자의 위치에서 부터의 거리를 설정할 때 사용(음수도 가능)
- 15강 index_4.html, main_4.css
-----------------------------------------------
5강. position 속성값 - relative
- relative 속성은 자기 자신을 기준으로 위치를 옮김
- 자기 자신은 그자리에 있는데 잔상이 옮겨진 위치에 보여진다고 보면 됨(주변에 영향을 줌)
- 주변에 영향을 주기때문에 주의해야함
-----------------------------------------------
6강. postion 속성값 - absolute
- absolute는 부모요소를 기준으로 위치를 옮김(위치상의 부모 요소)
- position ~~~가 지정되어있는 부모요소를 기준으로 하는 것으로 부모요소에 이게 없다면 더 상위로 올라감
- 상위 요소에 position이 없다면 화면 전체에서로 설정된다고 보면 됨
-----------------------------------------------
7강. position 속성값 - fixed
- 브라우저(viewport)를 기준으로 위치를 지정하는 것
- 화면에 고정되어서 스크롤을 움직여도 그자리에 붙어있음
-----------------------------------------------
8강. position 속성값 - sticky
- 스크롤 영역 기준으로 배치
- 인터넷 익스플로러에서는 지원해주지 않음
- 스크롤을 내렸을 때 아직 그 부분이 보인다면 그 내용이 계속해서 따라 내려옴
- 15강 index_5.html, main_5.css
-----------------------------------------------
9강. position 특징 - 요소 쌓임 순서
- 어떤 요소가 사용자와 가깝게 있는지 를 결정
- 어떤 요소가 앞에 있고 어떤 요소가 뒤에있는지 규칙
 - static을 제외하고 position 속성 값이 있는 경우에 위에 쌓임
 - position이 모두 존재한다면 z-index 속성의 숫자값이 높을수록 앞에 쌓임
 - position이 모두 있고 z-index속성이 모두 같다면 가장 나중에 작성한 코드일수록 앞에 쌓임
- 15강 index_6.html, main_6.css
-----------------------------------------------
10강. position 특징 - display 수정
- position이 absolute, fixed 속성이 적용된 경우에 대부분 block 요소로 변화됨
-----------------------------------------------
<16. css/속성 - 배경>
1강. background
- 요소의 배경을 설정할 때 사용
- background-color : 배경 색상
- background-image : 배경 이미지
- 등등의 속성을 사용할 수 있음
- background: 색상 이미지경로 반복 위치 스크롤특성; 의 순으로 사용
- 특정 속성을 누락해도 상관 없음
-----------------------------------------------
2강. background-color
- background-color는 배경 색상을 지정할 때 사용
- 기본적으로 transparent(투명) 속성을 기본값으로 가짐
- background:color; 는 background-color:color;과 같은 것
-----------------------------------------------
3강. background-image
- background-image는 배경에 하나 이상의 이미지를 삽입할 때 사용
- none이 기본값이고 url("경로")를 통해서 경로에 있는 이미지를 배경으로 설정 가능
- background 옵션으로 쓸때에는 url과 반복옵션을 작성해주어야함
- 이미지를 여러개를 넣을 경우에는 겹쳐져서 표현됨
- 기본적으로 크기가 넘어가면 반복적으로 출력되는데 background-repeat: no-repeat;을 써서 반복하지 않도록 함
-----------------------------------------------
4강. background-repeat
- 배경이미지의 반복을 설정할 때 사용
- repeat(수직 수평 반복), repeat-x(수평 반복), repeat-y(수직 반복), no-repeat(반복 안함)가 있으며 repeat가 기본값임
-----------------------------------------------
5강. background-position
- 배경 이미지의 위치를 지정해주는 설정
- %, 방향, 단위를 가지고 설정할 수 있으며, background-position:x축(방향) y축(방향); 의 방법으로 지정해줌
- 방향으로 입력할 때에는 순서를 바꿔도 상관 없지만, 값을 넣을때에는 x축 y축 순서가 고정임을 명심해야한다
- 방향과 단위를 동시에 사용할 수 있음(단, 순서를 지켜줘야함(x축 y축))
-----------------------------------------------
6강.background-attachment
- 요소가 스크롤될 때 배경 이미지의 스크롤 여부를 설정할 때 사용
- 속성값으로는 scroll(배경 이미지가 요소를 따라서 같이 스크롤됨), fixed(배경이미지는 화면에 고정되어있음), local(많이 사용 안함, 요소내 스크롤 시 배경이미지도 같이 이동)이 가능
- fixed 예제 15강 index_7.html, main_7.css, scroll은 이 예제에 fixed를 scroll로 바꿔서 테스트해보면 됨
- local 예제 15강 index_8.html, main_8.css
-----------------------------------------------
7강. background-size
- 배경 이미지의 크기를 지정
- 기본값은 auto로 이미지의 원래 크기로 나타내어줌, background-size:가로너비 세로너비;로 단위를 통해서 나타낼 수 있으며 1개만 넣으면 가로 너비로 그값을 사용하고 세로 너비는 자동
- cover을 넣으면 배경이미지의 크기 비율을 유지하며 더 넓은 너비에 맞게 적용
- contain은 cover과 반대로 짧은 너비에 맞춰줌 빈공간이 생길 수 있음
-----------------------------------------------
<17. css/속성 - 전환 & 변환>

1강. 전환(transitions)
- transition은 css속성의 시작과 끝을 지정하여 증간값을 애니메이션화 할 때 사용
- transition-property는 전환 효과를 사용할 속성 이름을 넣는 것으로 기본값은 all
  - 기본값은 all이라 모든 속성이 적용 되며, 속성 이름을 지정해주면 그 속성만 애니메이션이 지정됨
- transition-duration은 전환 효과의 지속시간을 설정, 기본적으로 0s를 기본값으로 갖음
  - ms로 지정할수도 있음
- transition-timing-function은 타이밍 함수를 지정할 때 사용 기본값은 ease, 빠르게 진행되다가 천천히 끝날것인가, 천천히 진행되다가 빠르게 끝날것인가 등등을 지정하는 것
  - ease : 빠르게->느리게, linear:일정하게, ease-in:느리게->빠르게.... 등등 다양한 속성을 넣을수는 있음
  - 구글에 easing function이라고 치면 어떤 형태가 있는지 그래프로 보여줌
  - cubic-bezier(n,n,n,n)으로 설정할수도 있으나 기본으로 제공하는것 쓰는게 나음
  - steps(n)을 넣으면 변하는 단계를 지정
- transition-delay는 전환 효과의 대기시간을 설정할 때 사용
  - 몇초 후에 전환 효과가 시작할 것인가를 지정해줌
  - 초를 두개를 적으면 앞에있는것이 duration, 뒤에있는 것이 delay로 해석됨
- transition-timing-function와 transition-delay는 많이 사용하진 않음
- 17강 index_1.html, main_1.css
-----------------------------------------------
2강. 변환(transforms) 개요
- 속성은 transform 하나밖에 없으며 값에 변환 함수를 넣어서 사용
  - transform: 변환함수1 변환함수2 ....;
  - transform: 원근법 이동 크기 회전 기울임;
  - ex) transform: rotate(20deg) translate(10px, 0);
- 변형효과는 2d도 있고 3d 속성도 있음
-----------------------------------------------
3강. 변환 2d 속성
- translate(이동), scale(크기), rotate(회전), skew(비틀기) matrix(2차원 변환 효과)의 효과가 있음
- matrix는 모든 함수를 아우르는 함수임
- translate
  - translate(x,y) : x축으로 몇 y축으로 몇 이동할지 지정
  - translateX(x) : x축으로 몇 이동
  - translateY(y) : y축으로 몇 이동
  - scale(x,y) : 크기를 x축으로 얼만큼 y축으로 얼만큼 늘릴 것인가
  - scaleX(x) : x축으로 몇만큼 크기 늘림
  - scaleY(y) : y축으로 몇만큼 크기 늘림
  - rotate(degree) : 몇도 회전할 것인가
  - skew(x-deg, y-deg): x축 y축으로 얼만큼씩 비틀것인가
  - skewX(x-deg) : x축으로 얼만큼 비틀것인가
  - skewY(y-deg) : y축으로 얼만큼 비틀것인가
  - matrix(n,n,n,n,n,n) : 모든 2차변환 효과 지정 가능
- 17강 변환2d속성.html, 변환2d속성.css
-----------------------------------------------
4강. 변환 3d 속성
- translate3d, scale3d, rotate3d, perspective(n)(원근법), matrix3d가 있다
- rotateX, rotateY는 특이하게도 3d 함수이다
- perspective는 가장 앞에 선언되어있어야함
- 17강 변환3d속성.html, 변환3d속성.css
-----------------------------------------------
5강. 변환 속성 - transform-origin
- transform-origin은 요소 변환의 기준점을 설정할 때 사용 기본적으로 정 가운데를 위치로 변환이 일어나는데 기준 변경
- transform-style은 3d 변환 요소의 자식 요소도 3d 변환을 사용할지 설정
- perspective 는 하위 요소를 관찰하는 원근 거리 설정
- perspective-origin은 원근 거리 기준점을 설정
- backface-visibility 3d 변환으로 회전된 요소의 뒷면 숨김을 설정할 때 사용
- transform-origin: x축% y축%;형태로 사용하면 됨
- 17강 transform-origin.html, transform-origin.css
-----------------------------------------------
6강. 변환 속성 - transform-style
- transform-style은 자식요소의 3d 변환을 사용할지 설정
- 기본값은 flat으로 자식요소에서는 3차원 효과를 사용하지 않겠다
- preserve-3d로 쓰면 자식요소에서도 3차원 변환 사용 가능
-----------------------------------------------
7강. 변환 속성 - perspective
- 하위 요소를 관찰하는 원근 거리를 설정
- 단위는 px, em, cm등의 단위로 지정가능
- perspective속성이면 관찰대상의 부모 요소에 지정 tranform:perspective()속성은 관찰대상에게 적용
-----------------------------------------------
8강. 변환 속성 - perspective-origin
- 시선의 기준점을 지정할 때 사용
- transform-origin 처럼 사용하면 됨
-----------------------------------------------
9강. 변환 속성 - backface-visibility
- 3d 변환으로 회전된 요소의 뒷면 숨김을 설정할 때 사용
- 기본값은 visible로 뒷면이 보이고 숨기고 싶으면 hidden을 사용
-----------------------------------------------
10강. 변환 속성 - matrix()
- 요소의 2차원 변환 효과를 지정할 때 사용하며 scale(), skew(), translate(), rotate()를 지정
- matrix 함수는 사용하기 어렵기때문에 일반적으로 위의 4가지 함수를 사용
- 브라우저는 위의 4개의 함수를 자동으로 matrix로 변환하여 해석함
-----------------------------------------------
<18. css/속성 - 애니메이션 & 다단>

1강. 애니메이션 개요
- animation속성은 요소에 애니메이션을 설정/제어할 때 사용
- 단축속성이기 때문에 다양한 속성을 적용할 수 있음
- animation: 애니메이션이름 지속시간 [타이밍함수 대기시간 반복횟수 반복방향 전후상태 재생/정지]; 형태로 사용
- @keyframes로 애니메이션을 선언해줌
- 18강 애니메이션개요.html, 애니메이션개요.css
-----------------------------------------------
2강. keyframes rule
- @keyframes는 2개 이상의 애니메이션 중간 상태(프레임)을 지정할 때 사용
- @keyframes 애니메이션 이름{
    0%{속성: 값;}
    50%{속성: 값;}
    100%{속성: 값;}
  } 형태로 설정
- 18강 keyframes-rule.html, keyframes-rule.css
-----------------------------------------------
3강. 애니메이션 속성 - animation-name, animation-duration
- animation-name은 재생할 애니메이션의 이름 지정
- animation-duration은 애니메이션을 몇초동안 동작하게 할것인가
-----------------------------------------------
4강. 애니메이션 속성 - animation-timing-function, animation-delay
- animation-timing-function은 애니메이션을 어떤 속도 형태로 동작하게 할것인가(transition과 같음)
- animation-delay는 얼마의 시간 후에 동작하게 할 것인가
- 18강 atf_ad.html, atf_ad.css
-----------------------------------------------
5강. 애니메이션 속성 - animation-iteration-count, animation-direction
- animation-iteration-count는 반복할 횟수를 지정하는 것으로 infinite를 적으면 무한대로 반복
- animation-direction는 애니메이션 반복 방향을 설정 기본값은 normal이며 reverse는 역방향, alternate는 왕복, alternate-reverse는 역방향 반복
- 18강 aic_adi.html, aic_adi.css
-----------------------------------------------
6강. 애니메이션 속성 - animation-fill-mode
- animation-fill-mode는 애니메이션의 전후 상태를 설정
- 기본값은 none으로 기존 위치에서 시작해서 애니메이션이 시작 하는 위치로 이동 ->동작->기존위치로 가서 끝
- forwards는 기존위치에서 시작 -> 애네메이션 시작 위치로 이동 -> 동작 -> 애니메이션 끝 위치에서 끝
- backwards는 애니메이션 시작위치에서 시작-> 동작 -> 기존 위치에서 끝
- both는 애니메이션 시작위치에서 시작-> 동작-> 애니메이션 끝위치에서 끝
-----------------------------------------------
7강. 애니메이션 속성 - animation-play-state
- 애니메이션의 재생과 정지를 설정
- 기본값은 running이고, paused를 넣을수도 있음
-----------------------------------------------
8강. 다단(Multi Columns)
- 일반 블록 레이아웃을 확장하여 여러 텍스트 다단으로 쉽게 정리하여 가독성 확보하는 기능
- columns 속성을 이용해서 다단을 설정
- column-count로 다단의 갯수, column-width로 다단의 너비
- 단의 너비 스타일 색깔을 지정할때 column-rule 속성을 사용하며 column-rule-width, column-rule-style, column-rule-color
- 단과 단사이의 너비는 column-gap
-----------------------------------------------
<19. css/속성 - 플랙스>
1강. flex 개요
- 수평이나 수직 정렬과 관련된 속성
- inline-block로 display 타입을 정하면 각 값마다 사이에 띄어쓰기가 하나로 구분되게됨
- float:left를 사용시에는 요소를 부유시키기 때문에 부모 컨테이너가 둘러싸지못함
- 위의 방법을 통해 수평화하는 것은 대체재였음
- 부모요소에 display:flex를 사용시에 간단하게 수평화할 수 있음
- container는 item을 감싸는 부모요소이고 item을 정렬하기위해서는 container가 필수임
- container에서 item에 적용할 수 있는 item들이 정해져있음
- https://heropy.blog/2018/11/24/css-flexible-box/에 자세한 설명들 있음
-----------------------------------------------
2강. flex containers 속성 - display
- display는 flex container를 정의
- display속성으로 flex container를 선언하는 방법은 
  - display:flex; 블록요소처럼 컨테이너가 배치됨
  - display:inline-flex; 컨테이너가 인라인요소 처럼 배치됨
- 19강 container_flex.html, container_flex.css
-----------------------------------------------
3강. flex containers 속성 - flex-flow, flex-direction
- flex-flow는 flex-direction(items의 주 축을 설정)과 flex-wrap(items의 여러 줄 묶음 설정)의 단축속성
- flex-direction은 주축을 설정하는 것으로 기본값은 row고 row는 items가 수평정렬, row-reverse는 수평 반대 정렬, column은 수직정렬, column-reverse는 수직 반대 정렬
-----------------------------------------------
4강. flex 주축과 교차축, 시작점과 끝점
- 주축의 수직이 교차축이됨
- 주축이 바뀌면 교차축도 바뀜
- 시작점(flex-start)는 주축의 시작점, 끝점(flex-end)는 주축이 끝나는 지점
- 그것의 수직으로 교차축의 시작점과 끝점도 있음(단, reverse를 써도 교차축의 시작과 끝점은 바뀌지 않음)
-----------------------------------------------
5강. flex containers 속성 - flex-wrap
- flex-wrap은 items의 여러 줄 묶음을 설정할 때 사용
- nowrap은 모든 items들을 한줄에만 표시 기본값임(컨테이너 크기가 줄어들어 공간이 부족하면 item들의 크기도 줄어듬)
- wrap은 items를 여러줄로 묶음(컨테이너 크기가 줄어들어서 item이 들어갈 공간이 부족하면 다음줄에 표시)
- wrap-reverse는 여러줄로 역방향
- 19강 flex-wrap.html, flex-wrap.css
-----------------------------------------------
6강. flex containers 속성 - justify-content
- 주축의 정렬 방법을 설정
- 값으로는 flex-start(주축의 시작면부터), flex-end(주축의 끝면부터),center(가운데정렬), space-between(시작면부터 균등정렬(시작점과 끝점에 붙어있음)), space-around(균등정렬)가 있음
- 19강 justify-content.html, justify-content.css
-----------------------------------------------
7강. flex containers 속성 - align-content
- 교차축의 정렬 방법을 설정
- flex-wrap속성이 wrap이고 교차축에 여백이 있어야하며, 여러줄의 item이 있을때만 동작함
- 값은 justify-content와 같지만 stretch라는 값 하나만 추가되어있고 이게 기본값(container의 교차축을 채우기 위해 items를 늘림 - container의 세로 길이가 길면 안의 items들의 세로 길이가 늘어나느 것)
-----------------------------------------------
8강.  flex containers 속성 - align-items
- 교차축의 items의 정렬방법을 설정하는 것인데 items가 한줄일 때 많이 사용하는 것
- 값은 stretch, flex-start, start-end, center, baseline이 있는데 나머지는 align-content와 같고, baseline의 경우에는 문자열을 기준으로 정렬
- 19강 align-items.html, align-items.css
-----------------------------------------------
9강. flex items 속성 - order
- flex의 items들에 부여되는 속성들
- order는 item의 순서를 설정
- order의 순서를 지정하여 순서대로 나열
- 19강 order.html, order.css
-----------------------------------------------
10강. flex items 속성 - flex-grow
- items의 증가 너비를 지정할 때 사용
- 각각의 items의 flex-grow를 더해서 나눈 값만큼의 비율을 차지하도록 설정됨
- 기본 너비가 설정되어있는 경우에는 완벽하게 비율만큼 너비가 조정되진 않음
- 19강 flex-grow.html, flex-grow.css
-----------------------------------------------
11강. flex items 속성 - flex-shrink
- item이 감소하는 너비의 비율을 설정
- 숫자가 크면 더 많은 너비가 감소
- 기본값은 1
- flex-grow의 반대라고 생각하면 됨
- flex-basis같은 요소에 영향을 받음
- 값이 0일경우 효과 없음
-----------------------------------------------
12강. flex items 속성 - flex-basis
- item의 공간 배분전에 기본 너비를 설정
- auto로 값이 지정되어있을 경우에는 width, height등의 속성으로 item의 너비 설정 가능
- 기본값은 auto
-----------------------------------------------
13강. flex items 속성 - flex
- flex는 위의 속성들을 아우르는 단축속성
- flex: 증가너비 감소너비 기본너비;로 나타내며 기본값은 flex: 0 1 0;임
-----------------------------------------------
14강. flex items 속성 - align-self
- 교차축에서 개별 item의 정렬 방법을 설정할 때 사용
- align-items는 container에 모든 item의 정렬방법을 설정하는 것인데 다르게 한두개 정도 지정하고 싶을때 align-self 사용
- 들어가는 값은 align-items와 같음
-----------------------------------------------
<19. css/속성 - 플랙스>


