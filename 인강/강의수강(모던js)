<26. 1장| 벨로퍼트와 함께 하는 모던 자바스크립트 : JavaScript 입문>

00. JavaScript는 뭔가요
- 브라우저에서 사용하려고 만들어진 언어
- 웹 브라우저를 동적으로 사용하기 위해서 만듬
- 현재는 nodejs, react 등 다양한 것들이 파생되어 나옴
----------------------------------------------------------------------------
01. Hello-JavaScript
- 자바스크립트는 브라우저에서 언제든지 실행할 수 있음(ex. 크롬의 개발자도구에서 실행)
- 또는 웹에 codesandbox.io 에 들어가서도 실행해볼 수 있음
- 바닐라js가 일반 자바스크립트만 쓰겠다라고 보면 됨(어떤 라이브러리도 쓰지 않겠다.)
----------------------------------------------------------------------------
02. 변수
- 특정 이름에 특정 값을 넣는 것을 선언이라고 함
- 변수는 let으로 선언, 한번 선언한 변수를 또 같은 이름으로 선언할 수 없음
- 상수는 const라는 키워드를 사용하며 한번 값을 설정하면 바꾸지 못함
- 옛날에는 변수를 선언할 때 let이 아닌 var를 사용했지만 지금은 권장하지 않음
- var은 똑같은 이름으로 또 선언할 수 있음(하지만 사용하지 않음)
- 구형 브라우저에서는 let과 const를 쓸 수 없음
- null은 없다 undifined는 아직 정해지지 않았다.
----------------------------------------------------------------------------
03. 연산자 - 산술연산자, 대입연산자
- 연산자는 특정 연산을 할 때 사용하는 문자
- 산술 연산자는 사칙 연산등의 연산을 할 때 사용하는 연산자
- 대입 연산자는 특정 변수에 대입할 때 사용하는 연산자
----------------------------------------------------------------------------
04. 연산자 - 논리연산자
- 논리연산자는 boolean 값을 처리하기 위한 연산자
- !, &&, ||가 있음
- !, &&, || 순으로 계산
----------------------------------------------------------------------------
05. 연산자 - 비교연산자, 문자열 붙이기
- 자바 스크립트에서는 같은지 비교할 때에는 ===으로 비교(==으로 비교하면 값만 같은지 비교하는 것이고 ===은 값과 타입까지 같은지 비교하는 것)
- 문자열을 붙일때에는 문자열 + 문자열로 합쳐줌
----------------------------------------------------------------------------
06. 조건문 - if, else, else if
- 조건을 줄 때 사용
- 보통의 언어들이랑 사용방법 같음
----------------------------------------------------------------------------
07. 조건문 - switch case
- switch값이 case인 경우들을 찾음
----------------------------------------------------------------------------
08. 함수
- 파라미터가 주어졌을 때 처리해서 결과를 만들어냄
- function 키워드를 사용하여 선언
----------------------------------------------------------------------------
09. 함수 - Template Literal
- es6에서는 문자열 더하는 방법에 Template Literal이라고 쉽게 할 수 있는 방법이 생김
- ex `Hello ${name}!` 이런식임
----------------------------------------------------------------------------
10. 함수 - 연습
- grade를 구하는 함수 만드는 연습
fuction grade(score){
    if(score === 100){
        return A+;
    }
    else if(score >= 90){
        return A;
    }
    else if(score >=80){
        return B+;
    }
    else if(score >= 70){
        return B;
    }
    else{
        return C;
    }
}
----------------------------------------------------------------------------
11. 함수 - 화살표 함수
- const add = (a,b) =>{return a+b;} 와 같은 식으로 사용
- () => {} 가 기본 형태
- 이것도 ex6에서 추가되었음.
----------------------------------------------------------------------------
12. 객체
- 하나의 이름에 여러종류를 넣어줄 수 있게 해줌
- const person = {name:'Chovy', age:2}; 이런식으로 선언
- 내용물은 key: 값임
- 띄어쓰기를 키나 값에 넣으려면 ''로 묶어줘야함
----------------------------------------------------------------------------
13. 객체 - 비구조화 할당
- es6에는 비구조 할당이라는 문법이 있음
- 26강 ex1.js
- 특정 값들을 함수에서 빼온다고 보면 됨
----------------------------------------------------------------------------
14. 객체 - 객체 안에 함수 넣기
- 화살표함수는 this를 판별 못함
- 객체 안에도 함수를 만들 수 있음
- ex2.js
----------------------------------------------------------------------------
15. 객체 - Getter 와 Setter
- getter함수와 setter함수는 get과 set을 이용하여 선언해줄 수 있음
- setter 함수를 만들때에는 변수에 이름을 앞에 _를 뭍이는 게 좋음
- 26강 ex3.js
- 조회할 때마다 함수가 호출되는것을 막을 수 있음
----------------------------------------------------------------------------
16. 배열
- 자바스크립트에서 배열은 각각의 요소들의 타입이 같을 필요는 없음
- 배열을 선언할 때에는 자바스크립트에서는 []로 사용
- 배열에 추가하는 함수는 push를 쓰면됨(object.push(넣을 내용));
- 배열의 크기는 length 사용(object.length);
----------------------------------------------------------------------------
17. 반복문 - for
- 특정 동작을 반복할 때 사용
- 조건이 true일 경우 계속 반복함
- for(let i=0;i<a;i++){} 형태
----------------------------------------------------------------------------
18. 반복문 - while
- while(조건){}의 형태로 선언
----------------------------------------------------------------------------
19. 반복문 - for of, for in
- for of는 배열에 있는 내용물을 반복할 때 사용
- const numbers =[1,2,3,4,5];
  for(let number of numbers){
      console.log(number);
  } 
- for of 랑 for in은 헛갈려서 안써도 상관없음
- 객체의 키값이나 value값을 가져오고 싶으면 Object.keys(object명), Object.values(object명), 둘다 가져오고 싶으면 Object.entries(object명)으로 사용
- for in에는 object의 키값을 가지고 for of처럼 사용
----------------------------------------------------------------------------
20. 반복문 - continue와 break
- continue는 반복문의 다음 동작들을 무시하고 다음 반복 수행
- break는 반복문 자체가 종료
----------------------------------------------------------------------------
21. 반복문 - 연습과 퀴즈
- 함수 만드는 연습임(넘어가자)
----------------------------------------------------------------------------
22. 배열 내장함수 - forEach
- forEach문을 사용하면 반복문을 사용하지 않아도 배열에 있는 값들을 간단하게 가져올 수 있음
- ex4.js
----------------------------------------------------------------------------
23. 배열 내장함수 - map
- 배열 내의 값을 변환하고 싶을 때 사용
- ex5.js
- 몇번째에 값이 들어있는지 알고싶으면 array.indexOf('원하는값');으로 사용하면 알아낼 수 있음
- 안에 있는 값들이 객체이거나 조건일 경우에는 indexOf를 사용할 수 없음
- 위처럼 indexOf를 사용할 수 없는 경우에는 findIndex(함수)를 사용
- 일치하는게 없으면 -1이 return 됨
- findIndex를 사용하는 법은 const todo = todos.findIndex(todo => todo.done ===false);이런식으로 사용
----------------------------------------------------------------------------
24. 배열 내장함수 - filter
- 필터링해서 새로운 함수를 만들 때 사용
- object.filter(함수)의 형태로 사용할 수 있음
----------------------------------------------------------------------------
25. 배열 내장함수 - splice와 slice
- splice는 중간에 제거하고 싶은 배열들을 제거할 때 사용 (a.splice(시작위치, 갯수);)
- splice의 결과값은 제거된 값들이 저장됨, 원본 배열에서는 그 값들이 삭제됨
- slice는 기존의 배열들이 바뀌지 않으며 잘라서 사용하고 싶은 부분을 잘라서 사용(a.slice(시작위치, 갯수);)
- 둘의 차이는 기존의 배열을 변경하느냐 안하느냐의 차이
----------------------------------------------------------------------------
26. 배열 내장함수 - shift, pop, unshift, push
- shift는 기존의 배열 중 맨 처음 값을 꺼내옴, 기존 배열에 영향을 미침
- pop은 배열의 맨뒤부터 빼내옴, shift의 반대라고 보면됨
- unshfit는 shift의 반대로 배열의 맨앞에 원소를 추가함(numbers.unshift(5); 이런식으로 사용)
- push는 pop의 반대로 맨뒤에 push해줌
- concat은 배열 두개를 합칠때 사용하며 기존의 배열은 건들지 않음 (const concat_arr = arr1.concat(arr2); 이런식으로 사용)
- join 함수를 배열을 join 안의 구분자로 구분지어서 보여줄 때 사용 (console.log(array.join(', ')); 하면 1, 2, 3, 4, 5 이런식으로 출력됨)
----------------------------------------------------------------------------
27. 배열 내장함수 - reduce
- 배열이 주어졌을 때 배열안의 모든 값들을 사용하여 연산을 해야할 때 사용
- 26강 ex6.js 에 사용방법
- 다양한 곳에 써먹기 좋음
----------------------------------------------------------------------------
28. 배열 내장함수 - reduce 다른 예시
- 원소 내에 각 알파벳이 몇개있는지 조사할 때도 사용할 수 있음
- 26강 ex7.js
----------------------------------------------------------------------------
29. 배열 내장함수 - 복습과 퀴즈
- forEach : 배열에 있는 값을 순서대로 넣어서 함수를 실행
- map은 배열 내의 값을 함수에 맞게 일괄적으로 변경할 때 사용
- filter는 필터링하여 새로운 함수를 만들 때 사용
- indexOf는 해당 원소가 배열의 몇번째에 있는지 조사할 때 사용
- findIndex는 indexOf를 사용할 수 없는 경우에 사용(객체나 조건 찾을 때)
- splice는 배열의 중간을 제거하고 싶을 때 사용하며 기존의 배열에서 제거하고 return 값은 제거된 값들
- slice는 잘라서 잘라낸 부분을 return해주며 기존 배열에는 변화 없음
- shift는 배열의 맨앞을 꺼내올 때 unshift는 배열의 맨앞에 넣을 때
- pop은 배열의 맨 뒤에서 꺼내올 때, push는 배열의 맨 뒤에 넣을 때 사용
- reduce는 배열안의 모든 값을 사용하여 연산을 해야할 때 사용
----------------------------------------------------------------------------
30. 프로토타입과 클래스 - 객체 생성자
- 객체 생성자는 함수를 통해서 새로운 객체를 만들어주는 것
- 프로토타입은 객체를 함수로 생성했을 때 각각의 객체들이 공유할 수 있는 함수나 변수 등을 공유하도록 할 때 사용
- 26강 ex8.js
----------------------------------------------------------------------------
31. 프로토타입과 클래스 - 객체 생성자 상속하기
- 거의 비슷한 함수를 만들어야할 때 상속을 사용
- 26강 ex8.js에 Cat, Dog 함수
----------------------------------------------------------------------------
32. 프로토타입과 클래스 - ES6 Class
- es6 에서는 class라는 문법이 새로 생겼음
- 클래스를 사용하면 함수를 구현시에는 프로토타입으로 이미 적용되어있어서 따로 구현해주지 않아도 됨
- 26강 ex9.js
----------------------------------------------------------------------------
33. 프로토타입과 클래스 - 연습 - Food class 만들기
- 26강 ex10.js
----------------------------------------------------------------------------
<27. 2장| 벨로퍼트와 함께 하는 모던 자바스크립트 : 알고 있으면 유용한 js 문법 - 김민준 강사>
1. 삼항 연산자
- 삼항 연산자는 조건?참일경우 : 거짓인경우;의 형태로 사용
- 27강 삼항연산.js
- 긴 코드를 한줄로 줄여서 쉽게 작성할 수 있음
- 삼항 연산자를 여러번 중첩해서 쓸수도 있음
- 여러번 중첩할 수는 있으나 보기 불편해서 이럴땐 if문쓰는게 나을 수 있음
----------------------------------------------------------------------------
2.Truthy와 Falsy
- Truthy는 참인것 같은 것 Falsy는 거짓인 것 같은것
- 동작은 true, false와 같이 동작함
- Truthy 한 값 : Falsy한 값을 제외한 모든 값
- Falsy 한 값 : undifined, null, 0, '', NaN, false
- Truthy 한 값은 조건문에서 true로 Falsy한 값은 false로 동작함
----------------------------------------------------------------------------
3. 단축 평가 논리 계산법
- &&연산은 앞의 값이 falsy한 값이면 뒤의 값을 계산하지 않고 앞의 falsy한 값이 return 됨
- 앞의 값이 truthy하면 뒤의 값이 return 됨
- 이거 있으면 뒤에꺼 사용할래! 할때 사용
- ||연산은 앞의 값이 truthy하면 뒤에 값을 계산하지 않고 바로 truthy한 값이 return 됨
- 앞의 값이 falsy하면 뒤의 값이 return 됨
- 이거 없으면 뒤에꺼 사용할래! 할때 사용
----------------------------------------------------------------------------
4. 함수의 기본 파라미터
- 함수의 파라미터의 기본값을 지정해주면 파라미터 값을 넣지 않아도 그값이 기본으로 들어감
- 파라미터 들어갈 자리에 function test_func(r=1){} 이런식으로 써주면 됨(이러면 r값이 들어오지 않으면 1이 기본값으로 들어가는 것)
----------------------------------------------------------------------------
5. 조건문 더 스마트하게 쓰기
- 배열을 비교할 때에는 includes 함수를 이용하여 사용할 수 있음
- 27강 includes.js
- input된 파라미터에 따라서 return 되는 값이 다를 경우에는 object를 활용하여 return 해주면 더 편하게 사용할 수 있음
- 27강 objects.js
----------------------------------------------------------------------------
