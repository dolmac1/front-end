00. intro - 01. introduction
- 깃과 깃허브 사용하는 이유
 - 현대 개발 팀 프로젝트에서 버전관리와 클라우드 저장소는 필수
 - 버전관리 1등 git 과 클라우드 저장소 1등 github를 익히면 효율 증가
--------------------------------------------------------------------------------------------------------------------
01. 환경 설정하기 - 01. 버전 관리가 뭔가요
- 두명의 개발자가 하나의 서비스를 만들려면? 
 -> 각자 개발하다가 합쳐야함, 백업본 만들어야함, 고친건 메일에 적음, 코드를 합칠때 같이합쳐야함
- 따로 작업하는 것을 보완하기위해 깃 사용
- 원하는 시점마다 깃발을 꽂고 이들 간에 자유롭게 동아다닐 수 있다.
- 동료가 만든 버전으로 이동할 수 있으며 동료와 내 코드를 비교하여 최신 버전으로 변경 가능
- 깃은 저장할 공간만 있다면 어디서나 사용 가능
--------------------------------------------------------------------------------------------------------------------
01. 환경 설정하기 - 02. 환경 설정하기 - git 설치
- 명령프롬프트/terminal 에서 git을 입력해보고 내 컴퓨터에 이미 git이 설치되어있나 확인
- 없는 경우 git을 설치해야함(https://git-scm.com/download/win)
--------------------------------------------------------------------------------------------------------------------
02. 익히기 feat.CLI - 01. Git 초기화와 로컬 저장소
- 이 폴더에서 깃을 사용하겠다는 것을 알리기 위해서 git init을 해야함
- git 초기화를 하면 .git이라는 숨겨진 폴더가 만들어지는데 이게 로컬 저장소
- 로컬 저장소에 내가 만든 버전 정보, 원격 저장소 주소 등 저장
- 원격 저장소에서 내 컴퓨터로 코드를 받아오면 로컬 저장소가 자동으로 생김
- 한 폴더에 하나의 로컬 저장소만 유지 가능
- 원하는 위치에 가서 git init을 하면 .git이 만들어지고 해당 폴더는 (master)가 됨
--------------------------------------------------------------------------------------------------------------------
02. 익히기 feat.CLI - 02. 첫번째 버전 만들기
- 커밋은 하나의 버전임
- 이전 버전에서 다시 시작하고 싶으면 이전 커밋 버전으로 돌아가면 됨
- 커밋으로 만들길 원하는 파일을 선택하는 명령어 : add
- git add 파일명 의 형태로 사용
- git commit -m "추가할 메시지" 해서 커밋진행
- git log 를 하면 로그를 볼 수 있음
- 모든 파일을 선택할 때에는 git add . 으로 실행
- 커밋은 의미있는 변동사항을 묶어서 만드는 것
- 5가지 파일을 수정했다면 그 5가지를 묶어서 하나의 커밋으로 만듬
- 동료 개발자(미래의 나)가 왜 이코드를 고쳤는지 쉽게 파악 가능
- 커밋 메시지를 적는게 귀찮아도 중요함
--------------------------------------------------------------------------------------------------------------------
02. 익히기 feat.CLI - 03. 만든 버전 GitHub에 올리기
- 원하는 리포지토리의 주소를 추가해줘야함 
- 명령어는 git remote add origin 깃주소/repository.git
- 하고 push 하는 명령어는 git push -u origin master
--------------------------------------------------------------------------------------------------------------------
02. 익히기 feat.CLI - 04. 다른 사람이 만든 저장소 받아오기
- 다른 사람이 PUSH해놓은 것을 PULL로 당겨올 수 있음
- 다른 사람이 만들어놓은 것을 당겨올 때에는 git clone 주소.git으로 받아오고 받아온 파일들을 작업하여 다시 push하면 됨
- 현재 폴더에 받아오려면 git clone 주소.git . 을 해주면됨
- 바뀐 값을 받아올때에는 git pull 명령어를 사용하면 됨 git pull origin master의 형태로 사용하면 됨
- 따라서 순서는 git add . 하고 git commit -m "추가할 메시지" 하고 git push -u origin master 하면 된다.
--------------------------------------------------------------------------------------------------------------------
03. 다지기 feat.GUI - 01. 소스트로 GUI로 GIT 다지기
- 더 편하다고 생각하는 버전으로 GIT을 사용하는데 GUI 가 더 편하지만 CLI로 해야하는 경우도 있기 때문에 둘다 할 줄 알아야함
- 소스 트리를 활용하여 작업할 것 
--------------------------------------------------------------------------------------------------------------------
03. 다지기 feat.GUI - 02. 그림으로 배우는 add 와 commit
- 변경한 파일 중 깃허브에 올리고 싶은 것만 고르는 것이 add
- add된 파일들을 저장하는 것이 commit
- commit 은 최종본 전체를 저장하는 것임
- commit은 변경사항의 모임이 아니라 최종본의 모임
--------------------------------------------------------------------------------------------------------------------
03. 다지기 feat.GUI - 03. GUI로 add, commit, push, pull 하기
-  파일 상태에서 스테이지에 올리고 아래쪽에 커밋 메시지를 추가한 후에 커밋해주면 됨
- 그 후에 push를 통해서 github에 push 해줄 수 있음
- pull 을 통해서 서버에서 가져올 수 있음
--------------------------------------------------------------------------------------------------------------------
03. 다지기 feat.GUI - 04. 평행세계 나누기 - 브랜치(branch)
- 브랜치를 만드는 이유는 한줄로 여러명이 동시에 작업하면 충돌이 날 수 있음
- 여러 stream으로 파일을 수정한 후에 나중에 합치면 충돌이 나더라도 해결가능
- 우리는 지금까지 master 브랜치에 커밋을 한 것 (git push origin master를 통해서)
- CLI에서는 git branch 브랜치명 을 통해서 신규 브랜치를 생성할 수 있음
- 만든 브랜치로 이동하는 방법은 git checkout 브랜치명
- 

