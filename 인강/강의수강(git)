00. intro - 01. introduction
- 깃과 깃허브 사용하는 이유
 - 현대 개발 팀 프로젝트에서 버전관리와 클라우드 저장소는 필수
 - 버전관리 1등 git 과 클라우드 저장소 1등 github를 익히면 효율 증가
--------------------------------------------------------------------------------------------------------------------
01. 환경 설정하기 - 01. 버전 관리가 뭔가요
- 두명의 개발자가 하나의 서비스를 만들려면? 
 -> 각자 개발하다가 합쳐야함, 백업본 만들어야함, 고친건 메일에 적음, 코드를 합칠때 같이합쳐야함
- 따로 작업하는 것을 보완하기위해 깃 사용
- 원하는 시점마다 깃발을 꽂고 이들 간에 자유롭게 동아다닐 수 있다.
- 동료가 만든 버전으로 이동할 수 있으며 동료와 내 코드를 비교하여 최신 버전으로 변경 가능
- 깃은 저장할 공간만 있다면 어디서나 사용 가능
--------------------------------------------------------------------------------------------------------------------
01. 환경 설정하기 - 02. 환경 설정하기 - git 설치
- 명령프롬프트/terminal 에서 git을 입력해보고 내 컴퓨터에 이미 git이 설치되어있나 확인
- 없는 경우 git을 설치해야함(https://git-scm.com/download/win)
--------------------------------------------------------------------------------------------------------------------
02. 익히기 feat.CLI - 01. Git 초기화와 로컬 저장소
- 이 폴더에서 깃을 사용하겠다는 것을 알리기 위해서 git init을 해야함
- git 초기화를 하면 .git이라는 숨겨진 폴더가 만들어지는데 이게 로컬 저장소
- 로컬 저장소에 내가 만든 버전 정보, 원격 저장소 주소 등 저장
- 원격 저장소에서 내 컴퓨터로 코드를 받아오면 로컬 저장소가 자동으로 생김
- 한 폴더에 하나의 로컬 저장소만 유지 가능
- 원하는 위치에 가서 git init을 하면 .git이 만들어지고 해당 폴더는 (master)가 됨
--------------------------------------------------------------------------------------------------------------------
02. 익히기 feat.CLI - 02. 첫번째 버전 만들기
- 커밋은 하나의 버전임
- 이전 버전에서 다시 시작하고 싶으면 이전 커밋 버전으로 돌아가면 됨
- 커밋으로 만들길 원하는 파일을 선택하는 명령어 : add
- git add 파일명 의 형태로 사용
- git commit -m "추가할 메시지" 해서 커밋진행
- git log 를 하면 로그를 볼 수 있음
- 모든 파일을 선택할 때에는 git add . 으로 실행
- 커밋은 의미있는 변동사항을 묶어서 만드는 것
- 5가지 파일을 수정했다면 그 5가지를 묶어서 하나의 커밋으로 만듬
- 동료 개발자(미래의 나)가 왜 이코드를 고쳤는지 쉽게 파악 가능
- 커밋 메시지를 적는게 귀찮아도 중요함
--------------------------------------------------------------------------------------------------------------------







